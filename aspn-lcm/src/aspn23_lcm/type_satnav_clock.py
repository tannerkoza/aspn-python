"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct


class type_satnav_clock(object):
    """satnav broadcast parameters required to calculate sv clock corrections"""

    __slots__ = ["icd_type_satnav_clock", "t_oc", "af_0", "af_1", "af_2"]

    __typenames__ = ["int8_t", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None]

    def __init__(self):
        self.icd_type_satnav_clock = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.t_oc = 0.0
        """
        Description: Clock reference time
        Units: s
        LCM Type: double
        """

        self.af_0 = 0.0
        """
        Description: Satellite clock bias
        Units: s
        LCM Type: double
        """

        self.af_1 = 0.0
        """
        Description: Satellite clock drift
        Units: s/s
        LCM Type: double
        """

        self.af_2 = 0.0
        """
        Description: Satellite clock drift rate
        Units: s/s^2
        LCM Type: double
        """

    def encode(self):
        buf = BytesIO()
        buf.write(type_satnav_clock._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(
            struct.pack(
                ">bdddd",
                self.icd_type_satnav_clock,
                self.t_oc,
                self.af_0,
                self.af_1,
                self.af_2,
            )
        )

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != type_satnav_clock._get_packed_fingerprint():
            raise ValueError("Decode error")
        return type_satnav_clock._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = type_satnav_clock()
        self.icd_type_satnav_clock, self.t_oc, self.af_0, self.af_1, self.af_2 = (
            struct.unpack(">bdddd", buf.read(33))
        )
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if type_satnav_clock in parents:
            return 0
        tmphash = (0xDF69B6D398318D75) & 0xFFFFFFFFFFFFFFFF
        tmphash = (
            ((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)
        ) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if type_satnav_clock._packed_fingerprint is None:
            type_satnav_clock._packed_fingerprint = struct.pack(
                ">Q", type_satnav_clock._get_hash_recursive([])
            )
        return type_satnav_clock._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", type_satnav_clock._get_packed_fingerprint())[0]
