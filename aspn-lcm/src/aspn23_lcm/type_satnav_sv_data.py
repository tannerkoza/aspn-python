"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

import aspn23_lcm


class type_satnav_sv_data(object):
    """Satellite position, velocity and clock error at a particular time epoch"""

    __slots__ = [
        "icd_type_satnav_sv_data",
        "prn",
        "satellite_system",
        "ephemeris_type",
        "sv_data_time",
        "coordinate_frame",
        "sv_pos",
        "sv_vel",
        "sv_clock_bias",
        "sv_clock_drift",
        "group_delay_enum",
        "group_delay_vector",
    ]

    __typenames__ = [
        "int8_t",
        "int16_t",
        "aspn23_lcm.type_satnav_satellite_system",
        "int8_t",
        "aspn23_lcm.type_satnav_time",
        "int8_t",
        "double",
        "double",
        "double",
        "double",
        "int8_t",
        "float",
    ]

    __dimensions__ = [
        None,
        None,
        None,
        None,
        None,
        None,
        [3],
        [3],
        None,
        None,
        None,
        [4],
    ]

    EPHEMERIS_TYPE_SET_BY_SYSTEM = 0
    """ To be used when a system only uses one ephemeris representation, so knowing the satellite_system fully defines what ephemeris is being used. """
    EPHEMERIS_TYPE_GPS_LNAV = 1
    """ Calculated using legacy GPS (LNAV) messages """
    EPHEMERIS_TYPE_GPS_CNAV = 2
    """ Calculated using GPS CNAV messages """
    EPHEMERIS_TYPE_GPS_MNAV = 3
    """ Calculated using GPS MNAV messages """
    COORDINATE_FRAME_ITRF = 0
    """ International Terrestrial Reference Frame """
    COORDINATE_FRAME_ECEF = 1
    """ Earth-centered earth-fixed frame as defined by WGS-84 (nearly identical with ITRF) """
    COORDINATE_FRAME_GTRF = 2
    """ Galileo Terrestrial Reference Frame (nearly identical with ITRF) """
    COORDINATE_FRAME_PZ90 = 3
    """ Parametri Zemli 1990 (PZ-90) reference frame """
    GROUP_DELAY_ENUM_TGD_LNAV = 0
    """ group_delay_vector[0] is legacy Tgd as defined in ICD-GPS-200L Section 20.3.3.3.3.2. All other terms not used. """

    def __init__(self):
        self.icd_type_satnav_sv_data = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.prn = 0
        """
        Description: PRN code which identifies satellite (or slot number, in the case of GLONASS) of this ephemeris
        Units: none
        LCM Type: int16_t
        """

        self.satellite_system = aspn23_lcm.type_satnav_satellite_system()
        """
        Description: Describes the Satellite System which was used to generate the satellite information provided in this message
        Units: none
        LCM Type: aspn23_lcm.type_satnav_satellite_system
        """

        self.ephemeris_type = 0
        """
        Provides further clarification of which ephemeris was used to generate the satellite information provided in this message for systems which have more than one ephemeris representation.
        LCM Type: int8_t
        """

        self.sv_data_time = aspn23_lcm.type_satnav_time()
        """
        Description: Receiver time at which the data provided in this message is valid
        Units: none
        LCM Type: aspn23_lcm.type_satnav_time
        """

        self.coordinate_frame = 0
        """
        Coordinate frame system used to describe satellite position and velocity.
        LCM Type: int8_t
        """

        self.sv_pos = [0.0 for dim0 in range(3)]
        """
        Description: Satellite position in frame specified by coordinate_frame at time specified by sv_data_time_week_number and sv_data_time_seconds_of_week
        Units: m
        LCM Type: double[3]
        """

        self.sv_vel = [0.0 for dim0 in range(3)]
        """
        Description: Satellite velocity in frame specified by coordinate_frame at time specified by sv_data_time_week_number and sv_data_time_seconds_of_week
        Units: m/s
        LCM Type: double[3]
        """

        self.sv_clock_bias = 0.0
        """
        Description: Satellite clock bias at the sv_data_time, used to correct the satellite time like delta_t_sv in equation (1) of ICD-GPS-200L, Section 20.3.3.3.3.1
        Units: sec
        LCM Type: double
        """

        self.sv_clock_drift = 0.0
        """
        Description: Satellite clock drift rate at the sv_data_time. By way of example, for GPS this would be af1 in equation (2) of ICD-GPS-200L, Section 20.3.3.3.3.1
        Units: sec/sec
        LCM Type: double
        """

        self.group_delay_enum = 0
        """
        Describes how to interpret group delay terms, because they vary by ephemeris type. Descriptions assume zero-indexing.
        LCM Type: int8_t
        """

        self.group_delay_vector = [0.0 for dim0 in range(4)]
        """
        Description: Group delay terms, with interpretation provided by group_delay_enum. (Need to verify that four is sufficient for all ephemeris.) Units: sec
        LCM Type: float[4]
        """

    def encode(self):
        buf = BytesIO()
        buf.write(type_satnav_sv_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bh", self.icd_type_satnav_sv_data, self.prn))
        assert (
            self.satellite_system._get_packed_fingerprint()
            == aspn23_lcm.type_satnav_satellite_system._get_packed_fingerprint()
        )
        self.satellite_system._encode_one(buf)
        buf.write(struct.pack(">b", self.ephemeris_type))
        assert (
            self.sv_data_time._get_packed_fingerprint()
            == aspn23_lcm.type_satnav_time._get_packed_fingerprint()
        )
        self.sv_data_time._encode_one(buf)
        buf.write(struct.pack(">b", self.coordinate_frame))
        buf.write(struct.pack(">3d", *self.sv_pos[:3]))
        buf.write(struct.pack(">3d", *self.sv_vel[:3]))
        buf.write(
            struct.pack(
                ">ddb", self.sv_clock_bias, self.sv_clock_drift, self.group_delay_enum
            )
        )
        buf.write(struct.pack(">4f", *self.group_delay_vector[:4]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != type_satnav_sv_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return type_satnav_sv_data._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = type_satnav_sv_data()
        self.icd_type_satnav_sv_data, self.prn = struct.unpack(">bh", buf.read(3))
        self.satellite_system = aspn23_lcm.type_satnav_satellite_system._decode_one(buf)
        self.ephemeris_type = struct.unpack(">b", buf.read(1))[0]
        self.sv_data_time = aspn23_lcm.type_satnav_time._decode_one(buf)
        self.coordinate_frame = struct.unpack(">b", buf.read(1))[0]
        self.sv_pos = struct.unpack(">3d", buf.read(24))
        self.sv_vel = struct.unpack(">3d", buf.read(24))
        self.sv_clock_bias, self.sv_clock_drift, self.group_delay_enum = struct.unpack(
            ">ddb", buf.read(17)
        )
        self.group_delay_vector = struct.unpack(">4f", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if type_satnav_sv_data in parents:
            return 0
        newparents = parents + [type_satnav_sv_data]
        tmphash = (
            0x6E0A9F4AB23EBA20
            + aspn23_lcm.type_satnav_satellite_system._get_hash_recursive(newparents)
            + aspn23_lcm.type_satnav_time._get_hash_recursive(newparents)
        ) & 0xFFFFFFFFFFFFFFFF
        tmphash = (
            ((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)
        ) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if type_satnav_sv_data._packed_fingerprint is None:
            type_satnav_sv_data._packed_fingerprint = struct.pack(
                ">Q", type_satnav_sv_data._get_hash_recursive([])
            )
        return type_satnav_sv_data._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", type_satnav_sv_data._get_packed_fingerprint())[0]
