"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

"""
This code is generated via https://git.aspn.us/pntos/firehose/-/blob/main/firehose/backends/aspn/aspn_yaml_to_lcm.py
DO NOT hand edit code.  Make any changes required using the firehose repo instead
"""

from io import BytesIO
import struct

import aspn23_lcm

class measurement_IMU(object):
    """
    Inertial Measurement Unit (IMU) measurements from the device's three axis accelerometers and three
    axis gyroscopes.
    """

    __slots__ = ["icd_measurement_IMU", "header", "time_of_validity", "imu_type", "meas_accel", "meas_gyro", "num_integrity", "integrity"]

    __typenames__ = ["int8_t", "aspn23_lcm.type_header", "aspn23_lcm.type_timestamp", "int8_t", "double", "double", "int16_t", "aspn23_lcm.type_integrity"]

    __dimensions__ = [None, None, None, None, [3], [3], None, ["num_integrity"]]

    IMU_TYPE_INTEGRATED = 0
    """
    delta velocity and delta rotation measurements from the device's three axis accelerometers and
    three axis gyroscopes. Specific force integrated over last measurement period expressed as delta_v
    array in m/s. Angular rate integrated over last measurement period expressed as delta_theta array in
    radians. Time of validity is the end of integration period. Integration period is from previous
    measurement to the current measurement.
    """
    IMU_TYPE_SAMPLED = 1
    """
    sampled specific force and rotation rates from the device's three axis accelerometers and three
    axis gyroscopes. Specific force is sampled expressed as an array in m/s/s. Angular rate is sampled
    and expressed as an array in rad/s.
    """

    def __init__(self):
        self.icd_measurement_IMU = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.header = aspn23_lcm.type_header()
        """
        Description: Standard ASPN measurement header.
        Units: none
        LCM Type: aspn23_lcm.type_header
        """

        self.time_of_validity = aspn23_lcm.type_timestamp()
        """
        Description: Time at which the measurement is considered to be valid.
        Units: none
        LCM Type: aspn23_lcm.type_timestamp
        """

        self.imu_type = 0
        """
        IMU type
        LCM Type: int8_t
        """

        self.meas_accel = [ 0.0 for dim0 in range(3) ]
        """
        Description: Accelerometer (specific force) measurements in 3 axes per enumerated definition.
        Units: various
        LCM Type: double[3]
        """

        self.meas_gyro = [ 0.0 for dim0 in range(3) ]
        """
        Description: Gyroscope measurements in 3 axes per enumerated definition.
        Units: various
        LCM Type: double[3]
        """

        self.num_integrity = 0
        """
        Description: Number of integrity values.
        Units: none
        LCM Type: int16_t
        """

        self.integrity = []
        """
        Description: Measurement integrity. Includes the integrity method used and an integrity value
        (which is to be interpreted based upon the integrity method). The intent of allowing num_integrity >
        1 is to report multiple integrity values based on multiple integrity methods.
        Units: none
        LCM Type: aspn23_lcm.type_integrity[num_integrity]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(measurement_IMU._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_measurement_IMU))
        assert self.header._get_packed_fingerprint() == aspn23_lcm.type_header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.time_of_validity._get_packed_fingerprint() == aspn23_lcm.type_timestamp._get_packed_fingerprint()
        self.time_of_validity._encode_one(buf)
        buf.write(struct.pack(">b", self.imu_type))
        buf.write(struct.pack('>3d', *self.meas_accel[:3]))
        buf.write(struct.pack('>3d', *self.meas_gyro[:3]))
        buf.write(struct.pack(">h", self.num_integrity))
        for i0 in range(self.num_integrity):
            assert self.integrity[i0]._get_packed_fingerprint() == aspn23_lcm.type_integrity._get_packed_fingerprint()
            self.integrity[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != measurement_IMU._get_packed_fingerprint():
            raise ValueError("Decode error")
        return measurement_IMU._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = measurement_IMU()
        self.icd_measurement_IMU = struct.unpack(">b", buf.read(1))[0]
        self.header = aspn23_lcm.type_header._decode_one(buf)
        self.time_of_validity = aspn23_lcm.type_timestamp._decode_one(buf)
        self.imu_type = struct.unpack(">b", buf.read(1))[0]
        self.meas_accel = struct.unpack('>3d', buf.read(24))
        self.meas_gyro = struct.unpack('>3d', buf.read(24))
        self.num_integrity = struct.unpack(">h", buf.read(2))[0]
        self.integrity = []
        for i0 in range(self.num_integrity):
            self.integrity.append(aspn23_lcm.type_integrity._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if measurement_IMU in parents: return 0
        newparents = parents + [measurement_IMU]
        tmphash = (0x2e4773c22e4fc6ea+ aspn23_lcm.type_header._get_hash_recursive(newparents)+ aspn23_lcm.type_timestamp._get_hash_recursive(newparents)+ aspn23_lcm.type_integrity._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if measurement_IMU._packed_fingerprint is None:
            measurement_IMU._packed_fingerprint = struct.pack(">Q", measurement_IMU._get_hash_recursive([]))
        return measurement_IMU._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", measurement_IMU._get_packed_fingerprint())[0]

