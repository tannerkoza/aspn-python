"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

import aspn23_lcm


class metadata_Galileo_ephemeris(object):
    """
    GALILEO Ephemeris describing satellite locations. Definitions and usage are
    covered in OS SIS ICD, Issue 2.0, January 2021, Section 4.2, 4.3, and 5.1.
    """

    __slots__ = [
        "icd_metadata_Galileo_ephemeris",
        "info",
        "time_of_validity",
        "nav_msg_type",
        "prn",
        "clock",
        "orbit",
        "bgd",
    ]

    __typenames__ = [
        "int8_t",
        "aspn23_lcm.type_metadataheader",
        "aspn23_lcm.type_timestamp",
        "int8_t",
        "int32_t",
        "aspn23_lcm.type_satnav_clock",
        "aspn23_lcm.type_kepler_orbit",
        "double",
    ]

    __dimensions__ = [None, None, None, None, None, None, None, None]

    NAV_MSG_TYPE_INAV = 0
    """ I/NAV ephemeris. """
    NAV_MSG_TYPE_FNAV = 1
    """ F/NAV ephemeris. """

    def __init__(self):
        self.icd_metadata_Galileo_ephemeris = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.info = aspn23_lcm.type_metadataheader()
        """
        Description: Standard ASPN metadata header
        Units: none
        LCM Type: aspn23_lcm.type_metadataheader
        """

        self.time_of_validity = aspn23_lcm.type_timestamp()
        """
        Description: Time at which the measurement is considered to be valid
        Units: none
        LCM Type: aspn23_lcm.type_timestamp
        """

        self.nav_msg_type = 0
        """
        Enumerated field which describes the GALILEO message type used to define clock correction parameters.
        LCM Type: int8_t
        """

        self.prn = 0
        """
        Description: Satellite PRN number
        Units: none
        LCM Type: int32_t
        """

        self.clock = aspn23_lcm.type_satnav_clock()
        """
        Description: GNSS broadcast parameters required to calculate sv clock corrections
        Units: none
        LCM Type: aspn23_lcm.type_satnav_clock
        """

        self.orbit = aspn23_lcm.type_kepler_orbit()
        """
        Description: Keplerian orbit parameters required to calculate satellite position
        Units: none
        LCM Type: aspn23_lcm.type_kepler_orbit
        """

        self.bgd = 0.0
        """
        Description: Broadcast group delay (E1-E5b if F/Nav, E1-E5b if I/NAV) Units: s
        LCM Type: double
        """

    def encode(self):
        buf = BytesIO()
        buf.write(metadata_Galileo_ephemeris._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_metadata_Galileo_ephemeris))
        assert (
            self.info._get_packed_fingerprint()
            == aspn23_lcm.type_metadataheader._get_packed_fingerprint()
        )
        self.info._encode_one(buf)
        assert (
            self.time_of_validity._get_packed_fingerprint()
            == aspn23_lcm.type_timestamp._get_packed_fingerprint()
        )
        self.time_of_validity._encode_one(buf)
        buf.write(struct.pack(">bi", self.nav_msg_type, self.prn))
        assert (
            self.clock._get_packed_fingerprint()
            == aspn23_lcm.type_satnav_clock._get_packed_fingerprint()
        )
        self.clock._encode_one(buf)
        assert (
            self.orbit._get_packed_fingerprint()
            == aspn23_lcm.type_kepler_orbit._get_packed_fingerprint()
        )
        self.orbit._encode_one(buf)
        buf.write(struct.pack(">d", self.bgd))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != metadata_Galileo_ephemeris._get_packed_fingerprint():
            raise ValueError("Decode error")
        return metadata_Galileo_ephemeris._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = metadata_Galileo_ephemeris()
        self.icd_metadata_Galileo_ephemeris = struct.unpack(">b", buf.read(1))[0]
        self.info = aspn23_lcm.type_metadataheader._decode_one(buf)
        self.time_of_validity = aspn23_lcm.type_timestamp._decode_one(buf)
        self.nav_msg_type, self.prn = struct.unpack(">bi", buf.read(5))
        self.clock = aspn23_lcm.type_satnav_clock._decode_one(buf)
        self.orbit = aspn23_lcm.type_kepler_orbit._decode_one(buf)
        self.bgd = struct.unpack(">d", buf.read(8))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if metadata_Galileo_ephemeris in parents:
            return 0
        newparents = parents + [metadata_Galileo_ephemeris]
        tmphash = (
            0xA77F3330A3EB01F1
            + aspn23_lcm.type_metadataheader._get_hash_recursive(newparents)
            + aspn23_lcm.type_timestamp._get_hash_recursive(newparents)
            + aspn23_lcm.type_satnav_clock._get_hash_recursive(newparents)
            + aspn23_lcm.type_kepler_orbit._get_hash_recursive(newparents)
        ) & 0xFFFFFFFFFFFFFFFF
        tmphash = (
            ((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)
        ) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if metadata_Galileo_ephemeris._packed_fingerprint is None:
            metadata_Galileo_ephemeris._packed_fingerprint = struct.pack(
                ">Q", metadata_Galileo_ephemeris._get_hash_recursive([])
            )
        return metadata_Galileo_ephemeris._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(
            ">Q", metadata_Galileo_ephemeris._get_packed_fingerprint()
        )[0]
