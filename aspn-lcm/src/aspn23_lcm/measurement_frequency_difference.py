"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

import aspn23_lcm


class measurement_frequency_difference(object):
    """Frequency difference between two clocks or timing sources."""

    __slots__ = [
        "icd_measurement_frequency_difference",
        "header",
        "time_of_validity",
        "time_of_validity_attosec",
        "clock_id1",
        "clock_id2",
        "freq_diff",
        "variance",
        "error_model",
        "num_error_model_params",
        "error_model_params",
        "num_integrity",
        "integrity",
    ]

    __typenames__ = [
        "int8_t",
        "aspn23_lcm.type_header",
        "aspn23_lcm.type_timestamp",
        "int32_t",
        "int16_t",
        "int16_t",
        "double",
        "double",
        "int8_t",
        "int32_t",
        "double",
        "int16_t",
        "aspn23_lcm.type_integrity",
    ]

    __dimensions__ = [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        ["num_error_model_params"],
        None,
        ["num_integrity"],
    ]

    ERROR_MODEL_NONE = 0
    """ No additional error model provided (num_error_model_params = 0). """

    def __init__(self):
        self.icd_measurement_frequency_difference = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.header = aspn23_lcm.type_header()
        """
        Description: Standard ASPN measurement header
        Units: none
        LCM Type: aspn23_lcm.type_header
        """

        self.time_of_validity = aspn23_lcm.type_timestamp()
        """
        Description: Time at which the measurement is considered to be valid
        Units: none
        LCM Type: aspn23_lcm.type_timestamp
        """

        self.time_of_validity_attosec = 0
        """
        Description: Whole number of attoseconds used to provide additional timestamp fidelity describing the time at which the measurement is considered to be valid. This is only needed if the time of validity is known to more precision than 1ns; otherwise, set time_of_validity_attosec = 0. Be sure to report the timestamp's digits of precision in the `type_metadataheader` as part of the metadata. The full timestamp in nanoseconds is calculated as time_of_validity + ( time_of_validity_attosec * 1E-9 ) and if needed, a timestamp in seconds is calculated as time_of_validity * 1E-9 + time_of_validity_attosec * 1E-18 (Recall time_of_validity is in nanoseconds and time_of_validity_attosec is in attoseconds.) Furthermore, both time_of_validity and time_of_validity_attosec are signed integers and may be positive or negative. It is recommended to make time_of_validity and time_of_validity_attosec the same sign. Care should be taken when constructing the timestamp components to be sure the
        summation produces the desired result
        Units: attoseconds
        LCM Type: int32_t
        """

        self.clock_id1 = 0
        """
        Description: Identifier for clock/timing source 1. See clock_identifiers.md for a full description, but the summary is as follows: 0 = ASPN System Time 1 = International Atomic Time (TAI) 2 = Universal Coordinated Time (UTC) 3 = GPS System Time 4 = Galileo System Time 5 = GLONASS System Time 6 = BeiDou System Time 7-50: Reserved for future additional time scale representations
        Units: none
        LCM Type: int16_t
        """

        self.clock_id2 = 0
        """
        Description: Identifier for clock/timing source 2. See clock_identifiers.md for a full description, but the summary is as follows: 0 = ASPN System Time 1 = International Atomic Time (TAI) 2 = Universal Coordinated Time (UTC) 3 = GPS System Time 4 = Galileo System Time 5 = GLONASS System Time 6 = BeiDou System Time 7-50: Reserved for future additional time scale representations
        Units: none
        LCM Type: int16_t
        """

        self.freq_diff = 0.0
        """
        Description: Frequency difference formed as (frequency from clock_id1) - (frequency from clock_id2)
        Units: Hertz
        LCM Type: double
        """

        self.variance = 0.0
        """
        Description: Variance of the error in the frequency difference measurement
        Units: Hertz^2
        LCM Type: double
        """

        self.error_model = 0
        """
        Defines an optional error model for other than zero-mean, additive, white Gaussian noise (AWGN).
        LCM Type: int8_t
        """

        self.num_error_model_params = 0
        """
        Description: Number of parameters required for the error model chosen
        Units: none
        LCM Type: int32_t
        """

        self.error_model_params = []
        """
        Description: Error model parameters that characterize the optional error model
        Units: various
        LCM Type: double[num_error_model_params]
        """

        self.num_integrity = 0
        """
        Description: Number of integrity values
        Units: none
        LCM Type: int16_t
        """

        self.integrity = []
        """
        Description: Measurement integrity. Includes the integrity method used and an integrity value (which is to be interpreted based upon the integrity method). The intent of allowing num_integrity > 1 is to report multiple integrity values based on multiple integrity methods
        Units: none
        LCM Type: aspn23_lcm.type_integrity[num_integrity]
        """

    def encode(self):
        buf = BytesIO()
        buf.write(measurement_frequency_difference._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_measurement_frequency_difference))
        assert (
            self.header._get_packed_fingerprint()
            == aspn23_lcm.type_header._get_packed_fingerprint()
        )
        self.header._encode_one(buf)
        assert (
            self.time_of_validity._get_packed_fingerprint()
            == aspn23_lcm.type_timestamp._get_packed_fingerprint()
        )
        self.time_of_validity._encode_one(buf)
        buf.write(
            struct.pack(
                ">ihhddbi",
                self.time_of_validity_attosec,
                self.clock_id1,
                self.clock_id2,
                self.freq_diff,
                self.variance,
                self.error_model,
                self.num_error_model_params,
            )
        )
        buf.write(
            struct.pack(
                ">%dd" % self.num_error_model_params,
                *self.error_model_params[: self.num_error_model_params]
            )
        )
        buf.write(struct.pack(">h", self.num_integrity))
        for i0 in range(self.num_integrity):
            assert (
                self.integrity[i0]._get_packed_fingerprint()
                == aspn23_lcm.type_integrity._get_packed_fingerprint()
            )
            self.integrity[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != measurement_frequency_difference._get_packed_fingerprint():
            raise ValueError("Decode error")
        return measurement_frequency_difference._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = measurement_frequency_difference()
        self.icd_measurement_frequency_difference = struct.unpack(">b", buf.read(1))[0]
        self.header = aspn23_lcm.type_header._decode_one(buf)
        self.time_of_validity = aspn23_lcm.type_timestamp._decode_one(buf)
        (
            self.time_of_validity_attosec,
            self.clock_id1,
            self.clock_id2,
            self.freq_diff,
            self.variance,
            self.error_model,
            self.num_error_model_params,
        ) = struct.unpack(">ihhddbi", buf.read(29))
        self.error_model_params = struct.unpack(
            ">%dd" % self.num_error_model_params,
            buf.read(self.num_error_model_params * 8),
        )
        self.num_integrity = struct.unpack(">h", buf.read(2))[0]
        self.integrity = []
        for i0 in range(self.num_integrity):
            self.integrity.append(aspn23_lcm.type_integrity._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if measurement_frequency_difference in parents:
            return 0
        newparents = parents + [measurement_frequency_difference]
        tmphash = (
            0x760E09A792D443B1
            + aspn23_lcm.type_header._get_hash_recursive(newparents)
            + aspn23_lcm.type_timestamp._get_hash_recursive(newparents)
            + aspn23_lcm.type_integrity._get_hash_recursive(newparents)
        ) & 0xFFFFFFFFFFFFFFFF
        tmphash = (
            ((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)
        ) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if measurement_frequency_difference._packed_fingerprint is None:
            measurement_frequency_difference._packed_fingerprint = struct.pack(
                ">Q", measurement_frequency_difference._get_hash_recursive([])
            )
        return measurement_frequency_difference._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(
            ">Q", measurement_frequency_difference._get_packed_fingerprint()
        )[0]
