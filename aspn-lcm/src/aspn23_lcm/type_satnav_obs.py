"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

"""
This code is generated via https://git.aspn.us/pntos/firehose/-/blob/main/firehose/backends/aspn/aspn_yaml_to_lcm.py
DO NOT hand edit code.  Make any changes required using the firehose repo instead
"""

from io import BytesIO
import struct

import aspn23_lcm

class type_satnav_obs(object):
    """
    Defines measurements that come from a satnav receiver tracking a single signal from a single
    satellite.
    """

    __slots__ = ["icd_type_satnav_obs", "satellite_system", "signal_descriptor", "prn", "frequency", "pseudorange", "pseudorange_variance", "pseudorange_rate_type", "pseudorange_rate", "pseudorange_rate_variance", "carrier_phase", "carrier_phase_variance", "c_n0", "lock_count", "iono_correction_source", "iono_correction_applied", "tropo_correction_applied", "signal_bias_correction_applied", "num_integrity", "integrity"]

    __typenames__ = ["int8_t", "aspn23_lcm.type_satnav_satellite_system", "aspn23_lcm.type_satnav_signal_descriptor", "int16_t", "double", "double", "float", "int8_t", "double", "float", "double", "float", "float", "int32_t", "int8_t", "boolean", "boolean", "boolean", "int16_t", "aspn23_lcm.type_integrity"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, ["num_integrity"]]

    PSEUDORANGE_RATE_TYPE_PSR_RATE_DOPPLER = 0
    """ Instantaneous Doppler at measurement time. Units = Hz Cov. Units = Hz^2 """
    PSEUDORANGE_RATE_TYPE_PSR_RATE_DELTA_RANGE = 1
    """
    Change in pseudorange (integrated Doppler) over a specified time interval. The interval is
    provided in metadata_satnav_obs. Units = m Cov. Units = m^2
    """
    IONO_CORRECTION_SOURCE_UNKNOWN = 0
    """ unknown source """
    IONO_CORRECTION_SOURCE_MODELED = 1
    """ modeled using the ionospheric models in IS-GPS-200, IS-GPS-700, or IS-GPS-800 """
    IONO_CORRECTION_SOURCE_MEASURED = 2
    """ measured using dual frequencies """

    def __init__(self):
        self.icd_type_satnav_obs = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.satellite_system = aspn23_lcm.type_satnav_satellite_system()
        """
        Description: Enumerated field which describes the Satellite System that generated the
        observations.
        Units: none
        LCM Type: aspn23_lcm.type_satnav_satellite_system
        """

        self.signal_descriptor = aspn23_lcm.type_satnav_signal_descriptor()
        """
        Description: Satellite signal descriptor as defined in RINEX 3.05
        Units: none
        LCM Type: aspn23_lcm.type_satnav_signal_descriptor
        """

        self.prn = 0
        """
        Description: PRN code which identifies satellite (or slot number, in the case of GLONASS) for
        the observables.
        Units: none
        LCM Type: int16_t
        """

        self.frequency = 0.0
        """
        Description: Center frequency of signal. For GLONASS, this should be the center frequency of the
        frequency-shifted signal with the k value taken into account.
        Units: Hz
        LCM Type: double
        """

        self.pseudorange = 0.0
        """
        Description: Pseudorange measurement
        Units: m
        LCM Type: double
        """

        self.pseudorange_variance = 0.0
        """
        Description: Variance of pseudorange measurement noise/multipath. This value must be provided if
        the pseudorange measurement is provided. Note: This is not intended to represent clock, atmospheric,
        or satellite position errors.
        Units: m^2
        LCM Type: float
        """

        self.pseudorange_rate_type = 0
        """
        Indicates the type of measurement contained in pseudorange_rate.
        LCM Type: int8_t
        """

        self.pseudorange_rate = 0.0
        """
        Description: Measurement of the change in the pseudorange. See pseudorange_rate_type for
        details.
        Units: Hz or m
        LCM Type: double
        """

        self.pseudorange_rate_variance = 0.0
        """
        Description: Variance of pseudorange_rate noise. This value must be provided if the
        pseudorange_rate measurement is provided.
        Units: Hz^2 or m^2
        LCM Type: float
        """

        self.carrier_phase = 0.0
        """
        Description: Carrier-phase (integrated Doppler) measurement. This measurement has an N cycle
        ambiguity (where N is unknown and arbitrary integer).
        Units: cycles (1 cycle = wavelength of carrier frequency)
        LCM Type: double
        """

        self.carrier_phase_variance = 0.0
        """
        Description: Variance of carrier-phase noise/multipath. This value must be provided if the
        carrier-phase measurement is provided. Note: This is not intended to represent clock, atmospheric,
        or satellite position errors or the integer N ambiguity.
        Units: cycles^2
        LCM Type: float
        """

        self.c_n0 = 0.0
        """
        Description: Carrier to noise density ratio. C/N0 = 10[log10(S/N0)]
        Units: db-Hz
        LCM Type: float
        """

        self.lock_count = 0
        """
        Description: Number of observations with continuous tracking (no cycle slips). Value of -1 means
        that there is no loss of lock information available. First lock_count after cycle slip has occurred
        will have a value of 0. The lock_count only applies to the carrier-phase measurement.
        Units: none
        LCM Type: int32_t
        """

        self.iono_correction_source = 0
        """
        Enumerated field which describes the source of the ionospheric delay correction.
        LCM Type: int8_t
        """

        self.iono_correction_applied = False
        """
        Description: Identifies if the ionospheric correction has been applied to the measurement. 1 =
        Applied.
        Units: none
        LCM Type: boolean
        """

        self.tropo_correction_applied = False
        """
        Description: Identifies if the tropospheric correction has been applied to the measurement. 1 =
        Applied.
        Units: none
        LCM Type: boolean
        """

        self.signal_bias_correction_applied = False
        """
        Description: Represents biases within the transmitting signal that are identified in the
        downlink data, Group Delay for LNAV, and Interchannel Signal Correction (ISC) message for MNAV. This
        term indicates whether the correction is known, being applied to Pseudorange Correction, and its
        associated estimated error applied to the ERE. When invalid the correction and estimated error are
        not known and therefore not applied. 1 = Valid.
        Units: none
        LCM Type: boolean
        """

        self.num_integrity = 0
        """
        Description: Number of integrity values.
        Units: none
        LCM Type: int16_t
        """

        self.integrity = []
        """
        Description: Measurement integrity. Includes the integrity method used and an integrity value
        (which is to be interpreted based upon the integrity method). The intent of allowing num_integrity >
        1 is to report multiple integrity values based on multiple integrity methods.
        Units: none
        LCM Type: aspn23_lcm.type_integrity[num_integrity]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(type_satnav_obs._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_type_satnav_obs))
        assert self.satellite_system._get_packed_fingerprint() == aspn23_lcm.type_satnav_satellite_system._get_packed_fingerprint()
        self.satellite_system._encode_one(buf)
        assert self.signal_descriptor._get_packed_fingerprint() == aspn23_lcm.type_satnav_signal_descriptor._get_packed_fingerprint()
        self.signal_descriptor._encode_one(buf)
        buf.write(struct.pack(">hddfbdfdffibbbbh", self.prn, self.frequency, self.pseudorange, self.pseudorange_variance, self.pseudorange_rate_type, self.pseudorange_rate, self.pseudorange_rate_variance, self.carrier_phase, self.carrier_phase_variance, self.c_n0, self.lock_count, self.iono_correction_source, self.iono_correction_applied, self.tropo_correction_applied, self.signal_bias_correction_applied, self.num_integrity))
        for i0 in range(self.num_integrity):
            assert self.integrity[i0]._get_packed_fingerprint() == aspn23_lcm.type_integrity._get_packed_fingerprint()
            self.integrity[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != type_satnav_obs._get_packed_fingerprint():
            raise ValueError("Decode error")
        return type_satnav_obs._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = type_satnav_obs()
        self.icd_type_satnav_obs = struct.unpack(">b", buf.read(1))[0]
        self.satellite_system = aspn23_lcm.type_satnav_satellite_system._decode_one(buf)
        self.signal_descriptor = aspn23_lcm.type_satnav_signal_descriptor._decode_one(buf)
        self.prn, self.frequency, self.pseudorange, self.pseudorange_variance, self.pseudorange_rate_type, self.pseudorange_rate, self.pseudorange_rate_variance, self.carrier_phase, self.carrier_phase_variance, self.c_n0, self.lock_count, self.iono_correction_source = struct.unpack(">hddfbdfdffib", buf.read(56))
        self.iono_correction_applied = bool(struct.unpack('b', buf.read(1))[0])
        self.tropo_correction_applied = bool(struct.unpack('b', buf.read(1))[0])
        self.signal_bias_correction_applied = bool(struct.unpack('b', buf.read(1))[0])
        self.num_integrity = struct.unpack(">h", buf.read(2))[0]
        self.integrity = []
        for i0 in range(self.num_integrity):
            self.integrity.append(aspn23_lcm.type_integrity._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if type_satnav_obs in parents: return 0
        newparents = parents + [type_satnav_obs]
        tmphash = (0xa9ab728c73458bab+ aspn23_lcm.type_satnav_satellite_system._get_hash_recursive(newparents)+ aspn23_lcm.type_satnav_signal_descriptor._get_hash_recursive(newparents)+ aspn23_lcm.type_integrity._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if type_satnav_obs._packed_fingerprint is None:
            type_satnav_obs._packed_fingerprint = struct.pack(">Q", type_satnav_obs._get_hash_recursive([]))
        return type_satnav_obs._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", type_satnav_obs._get_packed_fingerprint())[0]

