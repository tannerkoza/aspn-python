"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

import aspn23_lcm


class metadata_generic(object):
    """Metadata for a generic sensor."""

    __slots__ = ["icd_metadata_generic", "info", "time_of_validity", "mounting"]

    __typenames__ = [
        "int8_t",
        "aspn23_lcm.type_metadataheader",
        "aspn23_lcm.type_timestamp",
        "aspn23_lcm.type_mounting",
    ]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.icd_metadata_generic = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.info = aspn23_lcm.type_metadataheader()
        """
        Description: Standard ASPN metadata header
        Units: none
        LCM Type: aspn23_lcm.type_metadataheader
        """

        self.time_of_validity = aspn23_lcm.type_timestamp()
        """
        Description: Time at which the measurement is considered to be valid
        Units: none
        LCM Type: aspn23_lcm.type_timestamp
        """

        self.mounting = aspn23_lcm.type_mounting()
        """
        Description: Standard ASPN mounting information
        Units: none
        LCM Type: aspn23_lcm.type_mounting
        """

    def encode(self):
        buf = BytesIO()
        buf.write(metadata_generic._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_metadata_generic))
        assert (
            self.info._get_packed_fingerprint()
            == aspn23_lcm.type_metadataheader._get_packed_fingerprint()
        )
        self.info._encode_one(buf)
        assert (
            self.time_of_validity._get_packed_fingerprint()
            == aspn23_lcm.type_timestamp._get_packed_fingerprint()
        )
        self.time_of_validity._encode_one(buf)
        assert (
            self.mounting._get_packed_fingerprint()
            == aspn23_lcm.type_mounting._get_packed_fingerprint()
        )
        self.mounting._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != metadata_generic._get_packed_fingerprint():
            raise ValueError("Decode error")
        return metadata_generic._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = metadata_generic()
        self.icd_metadata_generic = struct.unpack(">b", buf.read(1))[0]
        self.info = aspn23_lcm.type_metadataheader._decode_one(buf)
        self.time_of_validity = aspn23_lcm.type_timestamp._decode_one(buf)
        self.mounting = aspn23_lcm.type_mounting._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if metadata_generic in parents:
            return 0
        newparents = parents + [metadata_generic]
        tmphash = (
            0x7080E9865F6BAF78
            + aspn23_lcm.type_metadataheader._get_hash_recursive(newparents)
            + aspn23_lcm.type_timestamp._get_hash_recursive(newparents)
            + aspn23_lcm.type_mounting._get_hash_recursive(newparents)
        ) & 0xFFFFFFFFFFFFFFFF
        tmphash = (
            ((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)
        ) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if metadata_generic._packed_fingerprint is None:
            metadata_generic._packed_fingerprint = struct.pack(
                ">Q", metadata_generic._get_hash_recursive([])
            )
        return metadata_generic._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", metadata_generic._get_packed_fingerprint())[0]
