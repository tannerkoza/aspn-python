"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

"""
This code is generated via https://git.aspn.us/pntos/firehose/-/blob/main/firehose/backends/aspn/aspn_yaml_to_lcm.py
DO NOT hand edit code.  Make any changes required using the firehose repo instead
"""

from io import BytesIO
import struct

import aspn23_lcm

class measurement_satnav_subframe(object):
    """ satnav navigation data bit subframe. """

    __slots__ = ["icd_measurement_satnav_subframe", "header", "time_of_validity", "gnss_message_id", "prn", "satellite_system", "freq_slot_id", "num_bytes", "data_vector", "num_integrity", "integrity"]

    __typenames__ = ["int8_t", "aspn23_lcm.type_header", "aspn23_lcm.type_timestamp", "int64_t", "int32_t", "aspn23_lcm.type_satnav_satellite_system", "int32_t", "int64_t", "int8_t", "int16_t", "aspn23_lcm.type_integrity"]

    __dimensions__ = [None, None, None, None, None, None, None, None, ["num_bytes"], None, ["num_integrity"]]

    def __init__(self):
        self.icd_measurement_satnav_subframe = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.header = aspn23_lcm.type_header()
        """
        Description: Standard ASPN measurement header.
        Units: none
        LCM Type: aspn23_lcm.type_header
        """

        self.time_of_validity = aspn23_lcm.type_timestamp()
        """
        Description: Time at which the measurement is considered to be valid.
        Units: none
        LCM Type: aspn23_lcm.type_timestamp
        """

        self.gnss_message_id = 0
        """
        Description: Message ID provided from the satnav receiver.
        Units: none
        LCM Type: int64_t
        """

        self.prn = 0
        """
        Description: Satellite ID number.
        Units: none
        LCM Type: int32_t
        """

        self.satellite_system = aspn23_lcm.type_satnav_satellite_system()
        """
        Description: Describes the satellite system that generated the subframe.
        Units: none
        LCM Type: aspn23_lcm.type_satnav_satellite_system
        """

        self.freq_slot_id = 0
        """
        Description: Frequency slot +7 (range from 0-13). Only used for GLONASS.
        Units: none
        LCM Type: int32_t
        """

        self.num_bytes = 0
        """
        Description: Number of bytes of subframe data.
        Units: none
        LCM Type: int64_t
        """

        self.data_vector = []
        """
        Description: num_bytes sized array of raw subframe message collected by the sensor. The
        underlying type and shape of the data vector is given by satnav_msg_id.
        Units: none
        LCM Type: int8_t[num_bytes]
        """

        self.num_integrity = 0
        """
        Description: Number of integrity values.
        Units: none
        LCM Type: int16_t
        """

        self.integrity = []
        """
        Description: Measurement integrity. Includes the integrity method used and an integrity value
        (which is to be interpreted based upon the integrity method). The intent of allowing num_integrity >
        1 is to report multiple integrity values based on multiple integrity methods.
        Units: none
        LCM Type: aspn23_lcm.type_integrity[num_integrity]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(measurement_satnav_subframe._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_measurement_satnav_subframe))
        assert self.header._get_packed_fingerprint() == aspn23_lcm.type_header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.time_of_validity._get_packed_fingerprint() == aspn23_lcm.type_timestamp._get_packed_fingerprint()
        self.time_of_validity._encode_one(buf)
        buf.write(struct.pack(">qi", self.gnss_message_id, self.prn))
        assert self.satellite_system._get_packed_fingerprint() == aspn23_lcm.type_satnav_satellite_system._get_packed_fingerprint()
        self.satellite_system._encode_one(buf)
        buf.write(struct.pack(">iq", self.freq_slot_id, self.num_bytes))
        buf.write(struct.pack('>%db' % self.num_bytes, *self.data_vector[:self.num_bytes]))
        buf.write(struct.pack(">h", self.num_integrity))
        for i0 in range(self.num_integrity):
            assert self.integrity[i0]._get_packed_fingerprint() == aspn23_lcm.type_integrity._get_packed_fingerprint()
            self.integrity[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != measurement_satnav_subframe._get_packed_fingerprint():
            raise ValueError("Decode error")
        return measurement_satnav_subframe._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = measurement_satnav_subframe()
        self.icd_measurement_satnav_subframe = struct.unpack(">b", buf.read(1))[0]
        self.header = aspn23_lcm.type_header._decode_one(buf)
        self.time_of_validity = aspn23_lcm.type_timestamp._decode_one(buf)
        self.gnss_message_id, self.prn = struct.unpack(">qi", buf.read(12))
        self.satellite_system = aspn23_lcm.type_satnav_satellite_system._decode_one(buf)
        self.freq_slot_id, self.num_bytes = struct.unpack(">iq", buf.read(12))
        self.data_vector = struct.unpack('>%db' % self.num_bytes, buf.read(self.num_bytes))
        self.num_integrity = struct.unpack(">h", buf.read(2))[0]
        self.integrity = []
        for i0 in range(self.num_integrity):
            self.integrity.append(aspn23_lcm.type_integrity._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if measurement_satnav_subframe in parents: return 0
        newparents = parents + [measurement_satnav_subframe]
        tmphash = (0x7f9863cf39c491f7+ aspn23_lcm.type_header._get_hash_recursive(newparents)+ aspn23_lcm.type_timestamp._get_hash_recursive(newparents)+ aspn23_lcm.type_satnav_satellite_system._get_hash_recursive(newparents)+ aspn23_lcm.type_integrity._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if measurement_satnav_subframe._packed_fingerprint is None:
            measurement_satnav_subframe._packed_fingerprint = struct.pack(">Q", measurement_satnav_subframe._get_hash_recursive([]))
        return measurement_satnav_subframe._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", measurement_satnav_subframe._get_packed_fingerprint())[0]

