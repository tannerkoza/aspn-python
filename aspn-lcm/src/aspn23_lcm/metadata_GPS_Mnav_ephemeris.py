"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

"""
This code is generated via https://git.aspn.us/pntos/firehose/-/blob/main/firehose/backends/aspn/aspn_yaml_to_lcm.py
DO NOT hand edit code.  Make any changes required using the firehose repo instead
"""

from io import BytesIO
import struct

import aspn23_lcm

class metadata_GPS_Mnav_ephemeris(object):
    """
    MNAV Ephemeris describing GPS satellite locations. Definitions and usage are covered in
    ICD-GPS-200L, Section 20.3.3.4 and following, with additional military use definitions and usage
    covered in ICD-GPS-700D.
    """

    __slots__ = ["icd_metadata_GPS_Mnav_ephemeris", "info", "time_of_validity", "week_number", "prn", "clock", "orbit", "a_dot", "delta_af_0", "delta_af_1", "delta_gamma", "delta_i", "delta_omega", "delta_a", "isc_l1_m_e", "isc_l2_m_e", "isc_l1_m_s", "isc_l2_m_s", "isa_l2_py", "isa_l1_m_e", "isa_l2_m_e", "isa_l1_m_s", "isa_l2_m_s"]

    __typenames__ = ["int8_t", "aspn23_lcm.type_metadataheader", "aspn23_lcm.type_timestamp", "int32_t", "int32_t", "aspn23_lcm.type_satnav_clock", "aspn23_lcm.type_kepler_orbit", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.icd_metadata_GPS_Mnav_ephemeris = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.info = aspn23_lcm.type_metadataheader()
        """
        Description: Standard ASPN metadata header.
        Units: none
        LCM Type: aspn23_lcm.type_metadataheader
        """

        self.time_of_validity = aspn23_lcm.type_timestamp()
        """
        Description: Time at which the measurement is considered to be valid.
        Units: none
        LCM Type: aspn23_lcm.type_timestamp
        """

        self.week_number = 0
        """
        Description: Full GPS week number calculated from the Modulo 1024 WN in Subframe 1 and the
        number of GPS week rollovers
        Units: weeks
        LCM Type: int32_t
        """

        self.prn = 0
        """
        Description: Satellite PRN number.
        Units: none
        LCM Type: int32_t
        """

        self.clock = aspn23_lcm.type_satnav_clock()
        """
        Description: GNSS broadcast parameters required to calculate sv clock corrections.
        Units: none
        LCM Type: aspn23_lcm.type_satnav_clock
        """

        self.orbit = aspn23_lcm.type_kepler_orbit()
        """
        Description: Keplerian orbit parameters required to calculate satellite position.
        Units: none
        LCM Type: aspn23_lcm.type_kepler_orbit
        """

        self.a_dot = 0.0
        """
        Description: Change rate of semi-major axis.
        Units: m/s
        LCM Type: double
        """

        self.delta_af_0 = 0.0
        """
        Description: SV clock bias correction provided by the Mnav Message Correction (MMC).
        Units: s
        LCM Type: double
        """

        self.delta_af_1 = 0.0
        """
        Description: SV clock drift correction provided by the Mnav Message Correction (MMC).
        Units: s
        LCM Type: double
        """

        self.delta_gamma = 0.0
        """
        Description: Ephemeris parameters correction provided by the Mnav Message Correction (MMC).
        Units: radians
        LCM Type: double
        """

        self.delta_i = 0.0
        """
        Description: Angle of inclination correction provided by the Mnav Message Correction (MMC).
        Units: radians
        LCM Type: double
        """

        self.delta_omega = 0.0
        """
        Description: Angle of Right Ascension correction provided by the Mnav Message Correction (MMC).
        Units: radians
        LCM Type: double
        """

        self.delta_a = 0.0
        """
        Description: Semi-major axis correction provided by the Mnav Message Correction (MMC).
        Units: m
        LCM Type: double
        """

        self.isc_l1_m_e = 0.0
        """
        Description: L M1_E to L1 P(Y) inter-signal correction.
        Units: s
        LCM Type: double
        """

        self.isc_l2_m_e = 0.0
        """
        Description: L M2_E to L1 P(Y) inter-signal correction.
        Units: s
        LCM Type: double
        """

        self.isc_l1_m_s = 0.0
        """
        Description: L M1_S to L1 P(Y) inter-signal correction.
        Units: s
        LCM Type: double
        """

        self.isc_l2_m_s = 0.0
        """
        Description: L M2_S to L1 P(Y) inter-signal correction.
        Units: s
        LCM Type: double
        """

        self.isa_l2_py = 0.0
        """
        Description: L2 P(Y) to L1 P(Y) inter-signal accuracy index.
        Units: none
        LCM Type: double
        """

        self.isa_l1_m_e = 0.0
        """
        Description: L M1_E to L1 P(Y) inter-signal accuracy index.
        Units: none
        LCM Type: double
        """

        self.isa_l2_m_e = 0.0
        """
        Description: L M2_E to L1 P(Y) inter-signal accuracy index.
        Units: none
        LCM Type: double
        """

        self.isa_l1_m_s = 0.0
        """
        Description: L M1_S to L1 P(Y) inter-signal accuracy index.
        Units: none
        LCM Type: double
        """

        self.isa_l2_m_s = 0.0
        """
        Description: L M2_S to L1 P(Y) inter-signal accuracy index.
        Units: none
        LCM Type: double
        """


    def encode(self):
        buf = BytesIO()
        buf.write(metadata_GPS_Mnav_ephemeris._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_metadata_GPS_Mnav_ephemeris))
        assert self.info._get_packed_fingerprint() == aspn23_lcm.type_metadataheader._get_packed_fingerprint()
        self.info._encode_one(buf)
        assert self.time_of_validity._get_packed_fingerprint() == aspn23_lcm.type_timestamp._get_packed_fingerprint()
        self.time_of_validity._encode_one(buf)
        buf.write(struct.pack(">ii", self.week_number, self.prn))
        assert self.clock._get_packed_fingerprint() == aspn23_lcm.type_satnav_clock._get_packed_fingerprint()
        self.clock._encode_one(buf)
        assert self.orbit._get_packed_fingerprint() == aspn23_lcm.type_kepler_orbit._get_packed_fingerprint()
        self.orbit._encode_one(buf)
        buf.write(struct.pack(">dddddddddddddddd", self.a_dot, self.delta_af_0, self.delta_af_1, self.delta_gamma, self.delta_i, self.delta_omega, self.delta_a, self.isc_l1_m_e, self.isc_l2_m_e, self.isc_l1_m_s, self.isc_l2_m_s, self.isa_l2_py, self.isa_l1_m_e, self.isa_l2_m_e, self.isa_l1_m_s, self.isa_l2_m_s))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != metadata_GPS_Mnav_ephemeris._get_packed_fingerprint():
            raise ValueError("Decode error")
        return metadata_GPS_Mnav_ephemeris._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = metadata_GPS_Mnav_ephemeris()
        self.icd_metadata_GPS_Mnav_ephemeris = struct.unpack(">b", buf.read(1))[0]
        self.info = aspn23_lcm.type_metadataheader._decode_one(buf)
        self.time_of_validity = aspn23_lcm.type_timestamp._decode_one(buf)
        self.week_number, self.prn = struct.unpack(">ii", buf.read(8))
        self.clock = aspn23_lcm.type_satnav_clock._decode_one(buf)
        self.orbit = aspn23_lcm.type_kepler_orbit._decode_one(buf)
        self.a_dot, self.delta_af_0, self.delta_af_1, self.delta_gamma, self.delta_i, self.delta_omega, self.delta_a, self.isc_l1_m_e, self.isc_l2_m_e, self.isc_l1_m_s, self.isc_l2_m_s, self.isa_l2_py, self.isa_l1_m_e, self.isa_l2_m_e, self.isa_l1_m_s, self.isa_l2_m_s = struct.unpack(">dddddddddddddddd", buf.read(128))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if metadata_GPS_Mnav_ephemeris in parents: return 0
        newparents = parents + [metadata_GPS_Mnav_ephemeris]
        tmphash = (0xd4b551963c4268a8+ aspn23_lcm.type_metadataheader._get_hash_recursive(newparents)+ aspn23_lcm.type_timestamp._get_hash_recursive(newparents)+ aspn23_lcm.type_satnav_clock._get_hash_recursive(newparents)+ aspn23_lcm.type_kepler_orbit._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if metadata_GPS_Mnav_ephemeris._packed_fingerprint is None:
            metadata_GPS_Mnav_ephemeris._packed_fingerprint = struct.pack(">Q", metadata_GPS_Mnav_ephemeris._get_hash_recursive([]))
        return metadata_GPS_Mnav_ephemeris._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", metadata_GPS_Mnav_ephemeris._get_packed_fingerprint())[0]

