"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

import aspn23_lcm


class metadata_satnav_obs(object):
    """Metadata for satnav_obs"""

    __slots__ = [
        "icd_metadata_satnav_obs",
        "info",
        "time_of_validity",
        "deltarange_interval_start",
        "deltarange_interval_stop",
    ]

    __typenames__ = [
        "int8_t",
        "aspn23_lcm.type_metadataheader",
        "aspn23_lcm.type_timestamp",
        "float",
        "float",
    ]

    __dimensions__ = [None, None, None, None, None]

    def __init__(self):
        self.icd_metadata_satnav_obs = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.info = aspn23_lcm.type_metadataheader()
        """
        Description: Standard ASPN metadata header
        Units: none
        LCM Type: aspn23_lcm.type_metadataheader
        """

        self.time_of_validity = aspn23_lcm.type_timestamp()
        """
        Description: Time at which the measurement is considered to be valid
        Units: none
        LCM Type: aspn23_lcm.type_timestamp
        """

        self.deltarange_interval_start = 0.0
        """
        Description: Start time of the interval over which the deltarange is measured with respect to the measurement time. This value must be provided if the deltarange measurement is provided
        Units: seconds
        LCM Type: float
        """

        self.deltarange_interval_stop = 0.0
        """
        Description: Stop time of the interval over which the deltarange is measured with respect to the measurement time. This value must be provided if the deltarange measurement is provided. If the deltarange integration period is the same as the measurement time, this value should be 0
        Units: seconds
        LCM Type: float
        """

    def encode(self):
        buf = BytesIO()
        buf.write(metadata_satnav_obs._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_metadata_satnav_obs))
        assert (
            self.info._get_packed_fingerprint()
            == aspn23_lcm.type_metadataheader._get_packed_fingerprint()
        )
        self.info._encode_one(buf)
        assert (
            self.time_of_validity._get_packed_fingerprint()
            == aspn23_lcm.type_timestamp._get_packed_fingerprint()
        )
        self.time_of_validity._encode_one(buf)
        buf.write(
            struct.pack(
                ">ff", self.deltarange_interval_start, self.deltarange_interval_stop
            )
        )

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != metadata_satnav_obs._get_packed_fingerprint():
            raise ValueError("Decode error")
        return metadata_satnav_obs._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = metadata_satnav_obs()
        self.icd_metadata_satnav_obs = struct.unpack(">b", buf.read(1))[0]
        self.info = aspn23_lcm.type_metadataheader._decode_one(buf)
        self.time_of_validity = aspn23_lcm.type_timestamp._decode_one(buf)
        self.deltarange_interval_start, self.deltarange_interval_stop = struct.unpack(
            ">ff", buf.read(8)
        )
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if metadata_satnav_obs in parents:
            return 0
        newparents = parents + [metadata_satnav_obs]
        tmphash = (
            0xB3625B79E0AA8294
            + aspn23_lcm.type_metadataheader._get_hash_recursive(newparents)
            + aspn23_lcm.type_timestamp._get_hash_recursive(newparents)
        ) & 0xFFFFFFFFFFFFFFFF
        tmphash = (
            ((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)
        ) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if metadata_satnav_obs._packed_fingerprint is None:
            metadata_satnav_obs._packed_fingerprint = struct.pack(
                ">Q", metadata_satnav_obs._get_hash_recursive([])
            )
        return metadata_satnav_obs._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", metadata_satnav_obs._get_packed_fingerprint())[0]
