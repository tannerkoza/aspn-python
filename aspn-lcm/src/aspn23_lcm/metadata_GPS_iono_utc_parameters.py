"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

import aspn23_lcm


class metadata_GPS_iono_utc_parameters(object):
    """
    Broadcasted GPS navigation data for estimation of single frequency ionospheric
    correction and determination of UTC. Definitions and usage are covered in
    ICD-GPS-200L, Section 20.3.3.5.1.6 and 20.3.3.5.1.7.
    """

    __slots__ = [
        "icd_metadata_GPS_iono_utc_parameters",
        "info",
        "time_of_validity",
        "a_0",
        "a_1",
        "delta_t_ls",
        "tot",
        "wn_t",
        "wn_lsf",
        "dn",
        "delta_t_lsf",
        "alpha_0",
        "alpha_1",
        "alpha_2",
        "alpha_3",
        "beta_0",
        "beta_1",
        "beta_2",
        "beta_3",
    ]

    __typenames__ = [
        "int8_t",
        "aspn23_lcm.type_metadataheader",
        "aspn23_lcm.type_timestamp",
        "double",
        "double",
        "int8_t",
        "int64_t",
        "int16_t",
        "int16_t",
        "int16_t",
        "int8_t",
        "double",
        "double",
        "double",
        "double",
        "double",
        "double",
        "double",
        "double",
    ]

    __dimensions__ = [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ]

    def __init__(self):
        self.icd_metadata_GPS_iono_utc_parameters = 0
        """
        Non ASPN. Do not use. Extra field encoding the struct name to disambiguate LCM type fingerprint hashes.
        LCM Type: int8_t
        """

        self.info = aspn23_lcm.type_metadataheader()
        """
        Description: Standard ASPN metadata header
        Units: none
        LCM Type: aspn23_lcm.type_metadataheader
        """

        self.time_of_validity = aspn23_lcm.type_timestamp()
        """
        Description: Time at which the measurement is considered to be valid
        Units: none
        LCM Type: aspn23_lcm.type_timestamp
        """

        self.a_0 = 0.0
        """
        Description: Bias coefficient of GPS time scale relative to UTC time scale
        Units: s
        LCM Type: double
        """

        self.a_1 = 0.0
        """
        Description: Drift coefficient of GPS time scale relative to UTC time scale
        Units: s/s
        LCM Type: double
        """

        self.delta_t_ls = 0
        """
        Description: Leap second count
        Units: s
        LCM Type: int8_t
        """

        self.tot = 0
        """
        Description: Reference GPS time of week for UTC parameters Units: s
        LCM Type: int64_t
        """

        self.wn_t = 0
        """
        Description: Reference Modulo 256 GPS Week number for UTC parameters Units: weeks
        LCM Type: int16_t
        """

        self.wn_lsf = 0
        """
        Description: Modulo 256 GPS Week number at the end of which delta_t_lsf becomes effective
        Units: weeks
        LCM Type: int16_t
        """

        self.dn = 0
        """
        Description: Day number at the end of which delta_t_lsf becomes effective (1 to 7)
        Units: days
        LCM Type: int16_t
        """

        self.delta_t_lsf = 0
        """
        Description: Future leap second count
        Units: s
        LCM Type: int8_t
        """

        self.alpha_0 = 0.0
        """
        Description: Zeroth-order coefficient of amplitude of vertical ionospheric delay
        Units: s
        LCM Type: double
        """

        self.alpha_1 = 0.0
        """
        Description: First-order coefficient of amplitude of vertical ionospheric delay
        Units: s/rad
        LCM Type: double
        """

        self.alpha_2 = 0.0
        """
        Description: Second-order coefficient of amplitude of vertical ionospheric delay
        Units: s/rad^2
        LCM Type: double
        """

        self.alpha_3 = 0.0
        """
        Description: Third-order coefficient of amplitude of vertical ionospheric delay
        Units: s/rads^3
        LCM Type: double
        """

        self.beta_0 = 0.0
        """
        Description: Zeroth-order coefficient of period of ionospheric delay model
        Units: s
        LCM Type: double
        """

        self.beta_1 = 0.0
        """
        Description: First-order coefficient of period of ionospheric delay model
        Units: s/rad
        LCM Type: double
        """

        self.beta_2 = 0.0
        """
        Description: Second-order coefficient of period of ionospheric delay model
        Units: s/rad^2
        LCM Type: double
        """

        self.beta_3 = 0.0
        """
        Description: Third-order coefficient of period of ionospheric delay model
        Units: s/rad^3
        LCM Type: double
        """

    def encode(self):
        buf = BytesIO()
        buf.write(metadata_GPS_iono_utc_parameters._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.icd_metadata_GPS_iono_utc_parameters))
        assert (
            self.info._get_packed_fingerprint()
            == aspn23_lcm.type_metadataheader._get_packed_fingerprint()
        )
        self.info._encode_one(buf)
        assert (
            self.time_of_validity._get_packed_fingerprint()
            == aspn23_lcm.type_timestamp._get_packed_fingerprint()
        )
        self.time_of_validity._encode_one(buf)
        buf.write(
            struct.pack(
                ">ddbqhhhbdddddddd",
                self.a_0,
                self.a_1,
                self.delta_t_ls,
                self.tot,
                self.wn_t,
                self.wn_lsf,
                self.dn,
                self.delta_t_lsf,
                self.alpha_0,
                self.alpha_1,
                self.alpha_2,
                self.alpha_3,
                self.beta_0,
                self.beta_1,
                self.beta_2,
                self.beta_3,
            )
        )

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != metadata_GPS_iono_utc_parameters._get_packed_fingerprint():
            raise ValueError("Decode error")
        return metadata_GPS_iono_utc_parameters._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = metadata_GPS_iono_utc_parameters()
        self.icd_metadata_GPS_iono_utc_parameters = struct.unpack(">b", buf.read(1))[0]
        self.info = aspn23_lcm.type_metadataheader._decode_one(buf)
        self.time_of_validity = aspn23_lcm.type_timestamp._decode_one(buf)
        (
            self.a_0,
            self.a_1,
            self.delta_t_ls,
            self.tot,
            self.wn_t,
            self.wn_lsf,
            self.dn,
            self.delta_t_lsf,
            self.alpha_0,
            self.alpha_1,
            self.alpha_2,
            self.alpha_3,
            self.beta_0,
            self.beta_1,
            self.beta_2,
            self.beta_3,
        ) = struct.unpack(">ddbqhhhbdddddddd", buf.read(96))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if metadata_GPS_iono_utc_parameters in parents:
            return 0
        newparents = parents + [metadata_GPS_iono_utc_parameters]
        tmphash = (
            0x14D16D1CC53D43DC
            + aspn23_lcm.type_metadataheader._get_hash_recursive(newparents)
            + aspn23_lcm.type_timestamp._get_hash_recursive(newparents)
        ) & 0xFFFFFFFFFFFFFFFF
        tmphash = (
            ((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)
        ) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if metadata_GPS_iono_utc_parameters._packed_fingerprint is None:
            metadata_GPS_iono_utc_parameters._packed_fingerprint = struct.pack(
                ">Q", metadata_GPS_iono_utc_parameters._get_hash_recursive([])
            )
        return metadata_GPS_iono_utc_parameters._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(
            ">Q", metadata_GPS_iono_utc_parameters._get_packed_fingerprint()
        )[0]
